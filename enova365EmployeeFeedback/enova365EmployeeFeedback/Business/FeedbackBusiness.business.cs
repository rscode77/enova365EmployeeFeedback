
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Kadry;
using Soneta.Business.App;
using enova365EmployeeFeedback.Business;

[assembly: ModuleType("FeedbackBusiness", typeof(enova365EmployeeFeedback.Business.FeedbackBusinessModule), 4, "FeedbackBusiness", 1, VersionNumber=15)]

namespace enova365EmployeeFeedback.Business {

	/// <summary>
	/// Moduł FeedbackBusiness.
	/// <seealso cref="Soneta.Kadry"/>
	/// <seealso cref="Soneta.Business.App"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class FeedbackBusinessModule : Module {

		public static FeedbackBusinessModule GetInstance(ISessionable session) => (FeedbackBusinessModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new FeedbackBusinessModule(session)) {
		};

		FeedbackBusinessModule(Session session) : base(session) {}

		private KadryModule moduleKadry;

		[Browsable(false)]
		public KadryModule Kadry => moduleKadry ?? (moduleKadry = KadryModule.GetInstance(Session));

		public static readonly Soneta.Business.App.TableInfo FeedbacksEmpTableInfo = new Soneta.Business.App.TableInfo.Create<FeedbacksEmp, FeedbackEmp, FeedbackEmpRecord>("Feedback") {
		};

		public FeedbacksEmp FeedbacksEmp => (FeedbacksEmp)Session.Tables[FeedbacksEmpTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoFeedbackEmpEmployee = new Soneta.Business.App.KeyInfo(FeedbacksEmpTableInfo, table => new FeedbackEmpTable.EmployeeRelation(table)) {
			Name = "Relacja pola Employee",
			RelationTo = "Pracownik",
			KeyFields = new[] {"Employee", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów FeedbackEmp.
		/// Dziedzicząca klasa <see cref="FeedbacksEmp"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="FeedbacksEmp"/>
		/// <seealso cref="FeedbackEmpRow"/>
		/// <seealso cref="FeedbackEmp"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class FeedbackEmpTable : Table {

			protected FeedbackEmpTable() {}

			public partial class EmployeeRelation : Key<FeedbackEmp> {
				internal EmployeeRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((FeedbackEmpRecord)rec).Employee,
					row.ID
				};

				public SubTable<FeedbackEmp> this[Pracownik employee] => new SubTable<FeedbackEmp>(this, employee);
			}

			public EmployeeRelation WgEmployee => (EmployeeRelation)Session.Keys[keyInfoFeedbackEmpEmployee];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="FeedbackBusinessModule"/>
			public new FeedbackBusinessModule Module => (FeedbackBusinessModule)base.Module;

			public System.Linq.IQueryable<FeedbackEmp> AsQuery() => AsQuery<FeedbackEmp>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="FeedbackEmp"/>
			public new FeedbackEmp this[int id] => (FeedbackEmp)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="FeedbackEmp"/>
			public new FeedbackEmp[] this[int[] ids] => (FeedbackEmp[])base[ids];

			protected override Row CreateRow(RowCreator creator) => new FeedbackEmp();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Employee");
				names.Append(divider); names.Append("Rating1");
				names.Append(divider); names.Append("Rating2");
				names.Append(divider); names.Append("Rating3");
				names.Append(divider); names.Append("Rating4");
				names.Append(divider); names.Append("FeedbackText");
				names.Append(divider); names.Append("DateSubmitted");
			}

		}

		[Caption("Tabela oceny pracowniczej")]
		public abstract partial class FeedbackEmpRow : Row {

			private FeedbackEmpRecord record;

			protected override void AssignRecord(Record rec) {
				record = (FeedbackEmpRecord)rec;
			}

			protected FeedbackEmpRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[Description("Oceniany")]
			[Required]
			public Pracownik Employee {
				get {
					if (record==null) GetRecord();
					return (Pracownik)GetRowReference(ref record.Employee);
				}
				set {
					FeedbackEmpSchema.EmployeeBeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Employee");
					record.Employee = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoFeedbackEmpEmployee);
					}
					FeedbackEmpSchema.EmployeeAfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			[Description("Ocena")]
			[Required]
			public int Rating1 {
				get {
					if (record==null) GetRecord();
					return record.Rating1;
				}
				set {
					FeedbackEmpSchema.Rating1BeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					if (value==0) throw new RequiredException(this, "Rating1");
					GetEdit(record==null, false);
					record.Rating1 = value;
					FeedbackEmpSchema.Rating1AfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			[Description("Ocena")]
			[Required]
			public int Rating2 {
				get {
					if (record==null) GetRecord();
					return record.Rating2;
				}
				set {
					FeedbackEmpSchema.Rating2BeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					if (value==0) throw new RequiredException(this, "Rating2");
					GetEdit(record==null, false);
					record.Rating2 = value;
					FeedbackEmpSchema.Rating2AfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			[Description("Ocena")]
			[Required]
			public int Rating3 {
				get {
					if (record==null) GetRecord();
					return record.Rating3;
				}
				set {
					FeedbackEmpSchema.Rating3BeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					if (value==0) throw new RequiredException(this, "Rating3");
					GetEdit(record==null, false);
					record.Rating3 = value;
					FeedbackEmpSchema.Rating3AfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			[Description("Ocena")]
			[Required]
			public int Rating4 {
				get {
					if (record==null) GetRecord();
					return record.Rating4;
				}
				set {
					FeedbackEmpSchema.Rating4BeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					if (value==0) throw new RequiredException(this, "Rating4");
					GetEdit(record==null, false);
					record.Rating4 = value;
					FeedbackEmpSchema.Rating4AfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			[Description("Uwagi")]
			[MaxLength(255)]
			public string FeedbackText {
				get {
					if (record==null) GetRecord();
					return record.FeedbackText;
				}
				set {
					FeedbackEmpSchema.FeedbackTextBeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>FeedbackTextLength) throw new ValueToLongException(this, "FeedbackText", FeedbackTextLength);
					GetEdit(record==null, false);
					record.FeedbackText = value;
					FeedbackEmpSchema.FeedbackTextAfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			public const int FeedbackTextLength = 255;

			[Description("Data oceny")]
			[Required]
			public Date DateSubmitted {
				get {
					if (record==null) GetRecord();
					return record.DateSubmitted;
				}
				set {
					FeedbackEmpSchema.DateSubmittedBeforeEdit?.Invoke((FeedbackEmp)this, ref value);
					if (value==Date.MinValue) throw new RequiredException(this, "DateSubmitted");
					GetEdit(record==null, false);
					record.DateSubmitted = value;
					FeedbackEmpSchema.DateSubmittedAfterEdit?.Invoke((FeedbackEmp)this);
				}
			}

			[Browsable(false)]
			public new FeedbacksEmp Table => (FeedbacksEmp)base.Table;

			[Browsable(false)]
			public FeedbackBusinessModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => FeedbacksEmpTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				FeedbackEmpSchema.OnCalcObjectRight?.Invoke((FeedbackEmp)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				FeedbackEmpSchema.OnCalcParentsObjectRight?.Invoke((FeedbackEmp)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				FeedbackEmpSchema.OnCalcReadOnly?.Invoke((FeedbackEmp)this, ref result);
				return result;
			}

			class EmployeeRequiredVerifier : RequiredVerifier {
				internal EmployeeRequiredVerifier(IRow row) : base(row, "Employee") {
				}
				protected override bool IsValid() => ((FeedbackEmpRow)Row).Employee!=null;
			}

			class Rating1RequiredVerifier : RequiredVerifier {
				internal Rating1RequiredVerifier(IRow row) : base(row, "Rating1") {
				}
				protected override bool IsValid() => !(((FeedbackEmpRow)Row).Rating1==0);
			}

			class Rating2RequiredVerifier : RequiredVerifier {
				internal Rating2RequiredVerifier(IRow row) : base(row, "Rating2") {
				}
				protected override bool IsValid() => !(((FeedbackEmpRow)Row).Rating2==0);
			}

			class Rating3RequiredVerifier : RequiredVerifier {
				internal Rating3RequiredVerifier(IRow row) : base(row, "Rating3") {
				}
				protected override bool IsValid() => !(((FeedbackEmpRow)Row).Rating3==0);
			}

			class Rating4RequiredVerifier : RequiredVerifier {
				internal Rating4RequiredVerifier(IRow row) : base(row, "Rating4") {
				}
				protected override bool IsValid() => !(((FeedbackEmpRow)Row).Rating4==0);
			}

			class DateSubmittedRequiredVerifier : RequiredVerifier {
				internal DateSubmittedRequiredVerifier(IRow row) : base(row, "DateSubmitted") {
				}
				protected override bool IsValid() => !(((FeedbackEmpRow)Row).DateSubmitted==Date.MinValue);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new EmployeeRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Employee==null || record.Employee.State==RowState.Detached || Session==record.Employee.Session);
				Session.Verifiers.Add(new Rating1RequiredVerifier(this));
				Session.Verifiers.Add(new Rating2RequiredVerifier(this));
				Session.Verifiers.Add(new Rating3RequiredVerifier(this));
				Session.Verifiers.Add(new Rating4RequiredVerifier(this));
				Session.Verifiers.Add(new DateSubmittedRequiredVerifier(this));
				FeedbackEmpSchema.OnAdded?.Invoke((FeedbackEmp)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				FeedbackEmpSchema.OnLoaded?.Invoke((FeedbackEmp)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				FeedbackEmpSchema.OnEditing?.Invoke((FeedbackEmp)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				FeedbackEmpSchema.OnDeleting?.Invoke((FeedbackEmp)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				FeedbackEmpSchema.OnDeleted?.Invoke((FeedbackEmp)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				FeedbackEmpSchema.OnRepacked?.Invoke((FeedbackEmp)this);
			}

		}

		public sealed class FeedbackEmpRecord : Record {
			[Required]
			[ParentTable("Pracownik")]
			public IRow Employee;
			[Required]
			public int Rating1;
			[Required]
			public int Rating2;
			[Required]
			public int Rating3;
			[Required]
			public int Rating4;
			[MaxLength(255)]
			public string FeedbackText = "";
			[Required]
			public Date DateSubmitted;

			public override Record Clone() {
				FeedbackEmpRecord rec = (FeedbackEmpRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Employee = creator.Read_Row("Pracownicy");
				Rating1 = creator.Read_int();
				Rating2 = creator.Read_int();
				Rating3 = creator.Read_int();
				Rating4 = creator.Read_int();
				FeedbackText = creator.Read_string();
				DateSubmitted = creator.Read_date();
			}
		}

		public static class FeedbackEmpSchema {

			internal static RowDelegate<FeedbackEmpRow, Pracownik> EmployeeBeforeEdit;
			public static void AddEmployeeBeforeEdit(RowDelegate<FeedbackEmpRow, Pracownik> value)
				=> EmployeeBeforeEdit = (RowDelegate<FeedbackEmpRow, Pracownik>)Delegate.Combine(EmployeeBeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> EmployeeAfterEdit;
			public static void AddEmployeeAfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> EmployeeAfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(EmployeeAfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow, int> Rating1BeforeEdit;
			public static void AddRating1BeforeEdit(RowDelegate<FeedbackEmpRow, int> value)
				=> Rating1BeforeEdit = (RowDelegate<FeedbackEmpRow, int>)Delegate.Combine(Rating1BeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> Rating1AfterEdit;
			public static void AddRating1AfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> Rating1AfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(Rating1AfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow, int> Rating2BeforeEdit;
			public static void AddRating2BeforeEdit(RowDelegate<FeedbackEmpRow, int> value)
				=> Rating2BeforeEdit = (RowDelegate<FeedbackEmpRow, int>)Delegate.Combine(Rating2BeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> Rating2AfterEdit;
			public static void AddRating2AfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> Rating2AfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(Rating2AfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow, int> Rating3BeforeEdit;
			public static void AddRating3BeforeEdit(RowDelegate<FeedbackEmpRow, int> value)
				=> Rating3BeforeEdit = (RowDelegate<FeedbackEmpRow, int>)Delegate.Combine(Rating3BeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> Rating3AfterEdit;
			public static void AddRating3AfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> Rating3AfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(Rating3AfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow, int> Rating4BeforeEdit;
			public static void AddRating4BeforeEdit(RowDelegate<FeedbackEmpRow, int> value)
				=> Rating4BeforeEdit = (RowDelegate<FeedbackEmpRow, int>)Delegate.Combine(Rating4BeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> Rating4AfterEdit;
			public static void AddRating4AfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> Rating4AfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(Rating4AfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow, string> FeedbackTextBeforeEdit;
			public static void AddFeedbackTextBeforeEdit(RowDelegate<FeedbackEmpRow, string> value)
				=> FeedbackTextBeforeEdit = (RowDelegate<FeedbackEmpRow, string>)Delegate.Combine(FeedbackTextBeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> FeedbackTextAfterEdit;
			public static void AddFeedbackTextAfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> FeedbackTextAfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(FeedbackTextAfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow, Date> DateSubmittedBeforeEdit;
			public static void AddDateSubmittedBeforeEdit(RowDelegate<FeedbackEmpRow, Date> value)
				=> DateSubmittedBeforeEdit = (RowDelegate<FeedbackEmpRow, Date>)Delegate.Combine(DateSubmittedBeforeEdit, value);

			internal static RowDelegate<FeedbackEmpRow> DateSubmittedAfterEdit;
			public static void AddDateSubmittedAfterEdit(RowDelegate<FeedbackEmpRow> value)
				=> DateSubmittedAfterEdit = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(DateSubmittedAfterEdit, value);

			internal static RowDelegate<FeedbackEmpRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<FeedbackEmpRow> value)
				=> OnLoaded = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<FeedbackEmpRow> OnAdded;
			public static void AddOnAdded(RowDelegate<FeedbackEmpRow> value)
				=> OnAdded = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<FeedbackEmpRow> OnEditing;
			public static void AddOnEditing(RowDelegate<FeedbackEmpRow> value)
				=> OnEditing = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<FeedbackEmpRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<FeedbackEmpRow> value)
				=> OnDeleting = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<FeedbackEmpRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<FeedbackEmpRow> value)
				=> OnDeleted = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<FeedbackEmpRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<FeedbackEmpRow> value)
				=> OnRepacked = (RowDelegate<FeedbackEmpRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<FeedbackEmpRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<FeedbackEmpRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<FeedbackEmpRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<FeedbackEmpRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<FeedbackEmpRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<FeedbackEmpRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<FeedbackEmpRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<FeedbackEmpRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<FeedbackEmpRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsFeedbackBusinessModule {
		public static FeedbackBusinessModule GetFeedbackBusiness(this Session session) => FeedbackBusinessModule.GetInstance(session);

		public static TResult Record<TResult>(this IRecordInvoker<FeedbackEmp, TResult> row, Action<FeedbackBusinessModule.FeedbackEmpRecord> action)
		    => row.InvokeAction(action, (rec, act) => ((Action<FeedbackBusinessModule.FeedbackEmpRecord>)act)((FeedbackBusinessModule.FeedbackEmpRecord)rec));
	}

}

